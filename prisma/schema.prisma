// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    collection    Collection[]
    Save          Save[]
    role          Roles        @default(USER)
    ineterest     Tag[]
}

enum Roles {
    USER
    ADMIN
    PREMIUM_USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tag {
    id          Int          @id @default(autoincrement())
    name        String
    slug        String       @unique
    links       Link[]
    collections Collection[]
    users       User[]
}

model Link {
    id           Int        @id @default(autoincrement())
    siteName     String?
    title        String
    url          String
    desc         String?    @db.Text
    favicon      String?
    image        String?
    type         LinkType   @default(PAGE)
    tags         Tag[]
    visits       BigInt     @default(0)
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt()
    collectionId Int

    @@index([title, url])
}

enum LinkType {
    PAGE
    ARTICLE
    VIDEO
}

model Collection {
    id        Int      @id @default(autoincrement())
    title     String
    desc      String   @db.Text
    image     String?
    tags      Tag[]
    links     Link[]
    createdBy User?    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    userId    String?
    saves     Save[]

    @@index([title])
}

model Save {
    id           Int        @id @default(autoincrement())
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    collectionId Int
    userId       String
}
