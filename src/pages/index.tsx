/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { GetServerSidePropsContext, type NextPage } from "next";
import Head from "next/head";
import { useCollectionData } from "~/lib/hooks/useCollectionData";
import CollectionGrid from "~/components/collection/CollectionGrid";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { createInnerTRPCContext } from "~/server/api/trpc";
import { getServerAuthSession } from '~/server/auth';
import { appRouter } from "~/server/api/root";
import SuperJSON from "superjson";
import { api } from "~/utils/api";
import { useState } from "react";
import { CollectionOutput, CollectionSortType } from "~/schema/Collection.schema";
import { Segmented } from "antd";
import { SegmentedValue } from "antd/es/segmented";

export async function getServerSideProps(
  context: GetServerSidePropsContext
) {
  const helpers = createProxySSGHelpers({
    ctx: createInnerTRPCContext({ session: await getServerAuthSession({ ...context }) }),
    router: appRouter,
    transformer: SuperJSON,
  });

  return {
    props: {
      trpcState: helpers.dehydrate(),
    }
  }
}

const Home: NextPage = () => {
  const [sortData, setSortData] = useState<CollectionSortType | undefined>()
  const { data, isLoading } = api.collection.collectionFeed.useInfiniteQuery({ take: 30, sort: sortData as any }, {
    getNextPageParam: (lastPage) => lastPage?.nextCursor,
  });

  const handleSegmentChange = (value: SegmentedValue) => {
    switch (value) {
      case 'Latest':
        setSortData({createdAt: 'desc'})
        break;
      case 'Oldest':
        setSortData({createdAt: 'asc'})
        break;
    
      default:
        setSortData({saves: {_count: 'desc'}})
        break;
    }
    
  }

  return (
    <>

      <Head>
        <title>Link Blare App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <div className="flex justify-between items-center py-2 mb-5">
          <Segmented onChange={handleSegmentChange} options={['Latest', 'Oldest', 'Most Saved']} />
        </div>
        <CollectionGrid loading={isLoading} collections={data?.pages.map(d => d.items).flat() as CollectionOutput[] || []} />
      </main>
    </>
  );
};

export default Home;

